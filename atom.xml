<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>chen</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-15T12:27:44.762Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaEE复习</title>
    <link href="http://example.com/posts/66fd358d.html"/>
    <id>http://example.com/posts/66fd358d.html</id>
    <published>2022-09-15T12:27:07.207Z</published>
    <updated>2022-09-15T12:27:44.762Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java复习"><a href="#Java复习" class="headerlink" title="Java复习"></a>Java复习</h1><h3 id="1、ArrayList和LinkedList的区别"><a href="#1、ArrayList和LinkedList的区别" class="headerlink" title="1、ArrayList和LinkedList的区别"></a>1、ArrayList和LinkedList的区别</h3><p>1、ArrayList底层是数组，而LinkedList是元素列表形式储存，每一个元素与他前一个和后一个元素链接在一起</p><p>2、LinkedList比ArrayList更占内存，因为linkedList为每一个节点存储两个引用，一个指向前元素，一个指向后元素</p><p>3、插入、删除数据时LinkedList更快，因为ArrayList插入和删除数据时都会改变数组的长度</p><p>4、查询时ArrayList会更快，因为ArrayList是数组有下标</p><h3 id="2、线程的三大特性"><a href="#2、线程的三大特性" class="headerlink" title="2、线程的三大特性"></a>2、线程的三大特性</h3><p>1、可见性：多个线程访问同一个变量时，一个线程修改了这个变量，那么其他线程也能看到该值的修改</p><p>2、有序性：按照代码先后顺序执行</p><p>3、原子性：只有对基本数据类型的变量的读取和赋值操作时，不可被中断，要么执行要么不执行</p><h3 id="3、抽象类和接口的区别"><a href="#3、抽象类和接口的区别" class="headerlink" title="3、抽象类和接口的区别"></a>3、抽象类和接口的区别</h3><p>1、抽象类可以含有普通方法，而接口只能存在抽象方法</p><p>2、抽象类中成员变量可以时各种类型，而接口只能时public static final类型</p><p>3、抽象类只能继承一个，接口可以多个</p><p>接口类似与“like….”，而抽象类更类似“is a ….”，在使用场景方面：当关注一个事物的本质时就使用抽象类，而更关注操作时使用接口。</p><h3 id="4、lst和set的区别"><a href="#4、lst和set的区别" class="headerlink" title="4、lst和set的区别"></a>4、lst和set的区别</h3><p>list：有序、按对象进入顺序保存对象，可重复，能有多个null，可以使用迭代器取出所有的元素，可以使用get获取指定元素。</p><p>set：无序，不可重复，最多有一个null，取元素时只能使用迭代器取获取全部元素，在逐一遍历各个元素</p><h3 id="5、HashMap和HashTable的区别"><a href="#5、HashMap和HashTable的区别" class="headerlink" title="5、HashMap和HashTable的区别"></a>5、HashMap和HashTable的区别</h3><p>1、HashMap线程不安全，HashTable线程安全</p><p>2、HashMap的key和value为null，而HashTable不允许</p><p>3、HasMap底层为数组+链表，而在jdk1.8后当数组长度为64、链表高达8时，链表会转化成红黑树</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java复习&quot;&gt;&lt;a href=&quot;#Java复习&quot; class=&quot;headerlink&quot; title=&quot;Java复习&quot;&gt;&lt;/a&gt;Java复习&lt;/h1&gt;&lt;h3 id=&quot;1、ArrayList和LinkedList的区别&quot;&gt;&lt;a href=&quot;#1、ArrayList和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>工作流笔记</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2022-09-01T14:03:23.473Z</published>
    <updated>2022-09-15T12:25:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、历史活动和历史任务的区别</strong></p><p>历史活动包括所有节点（圆圈）和任务（矩形），而历史任务只包含任务</p><p>历史活动在act_hi_actinst表，而历史任务在act_hi_taskinst表</p><p><strong>2、什么是流程定义的key，流程id，ID格式组成</strong></p><p>Key：xml文件中定义流程元素的id</p><p>Id：对应流程数据库中act_re_procdef中的主键</p><p>ID格式：KEY：版本：资源表中最大流程资源ID+1</p><p><strong>3、删除流程定义有什么方法？及其区别</strong></p><p>非级联删除（启动后无法删除）：</p><p>deleteDeployment(流程ID)</p><p>级联删除（不管流程是否启动都删除）</p><p>deleteDeployment(流程ID，true)</p><p><strong>4、流程变量是什么，有什么用，如何获取与设置流程变量，在流程未结束时在哪张表能看见流程变量，流程结束又在哪里查看变量</strong></p><p>流程变量在整个工作流中扮演很重要的作用。例如：请假流程中有请假天数、请假原因等一些参数都为流程变量的范围</p><p>TaskService中的getVariable获取变量;</p><p>可以用TaskService中的setVariable（）设置流程变量</p><p>流程未结束在存在表act_ru_variable中，结束后在act_hi_varinst表</p><h4 id="5、流程开始执行时，会写入哪些表？"><a href="#5、流程开始执行时，会写入哪些表？" class="headerlink" title="5、流程开始执行时，会写入哪些表？"></a><strong>5、流程开始执行时，会写入哪些表？</strong></h4><p><strong>1、ACT_RE_DEPLOYMENT（部署信息表）</strong></p><p>部署流程定义时需要被持久化保存下来的信息</p><p><strong>2、ACT_RE_PROCDEF（流程定义数据表）</strong></p><p>业务流程定义数据表</p><p><strong>3、ACT_GE_BYTEARRAY（二进制数据表）资源文件表</strong></p><p>保存流程定义图片和xml、Serializable(序列化)的变量,即保存所有二进制数据</p><p><strong>4、ACT_GE_PROPERTY（主键生成表)</strong></p><p>将生成下次流程部署的主键ID。<br><div class="tip "><p>default</p></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1、历史活动和历史任务的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;历史活动包括所有节点（圆圈）和任务（矩形），而历史任务只包含任务&lt;/p&gt;
&lt;p&gt;历史活动在act_hi_actinst表，而历史任务在act_hi_taskinst表&lt;/p&gt;
&lt;p&gt;&lt;strong</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Java面试总结</title>
    <link href="http://example.com/posts/0.html"/>
    <id>http://example.com/posts/0.html</id>
    <published>2022-09-01T13:39:58.882Z</published>
    <updated>2022-09-15T12:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、Mybatis中-和-的区别"><a href="#1、Mybatis中-和-的区别" class="headerlink" title="1、Mybatis中#和$的区别"></a><strong>1、Mybatis中#和$的区别</strong></h4><p> #在sql语句中执行是作为占位符执行，可以防止sql注入</p><p>  $是直接拼接在sql语句中，一般用于order by那边</p><p>​      区别最大在于：#{} 传入值时，sql解析时，参数是带引号的，而的区别最大在于：#{} 传入值时，sql解析时，参数是带引号的，而{}穿入值，sql解析时，参数是不带引号的</p><h4 id="2、线程锁"><a href="#2、线程锁" class="headerlink" title="2、线程锁"></a><strong>2、线程锁</strong></h4><h4 id="3、synchronized与lock区别"><a href="#3、synchronized与lock区别" class="headerlink" title="3、synchronized与lock区别"></a>3、synchronized与lock区别</h4><p>1、synchronized是关键字，lock是个类</p><p>2、synchronized无法判断是否获取锁的状态，lock可以判断是否获取到锁</p><p>3、synchronized会自动释放锁，lock（unlock）需要手动释放锁，否则容易造成死锁</p><p>4、用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</p><p>5.synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可中断（interrupt()）、可公平（两者皆可</p><p>6.Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题</p><h4 id="4、TCP、TDP"><a href="#4、TCP、TDP" class="headerlink" title="4、TCP、TDP"></a>4、TCP、TDP</h4><p>​       UDP是无连接通信协议，UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。无论有没有回应都发送数据</p><p>​        TCP协议是面向连接的通信协议，即在传输数据前先在发送端和接收端建立逻辑连接，然后再传输数据，它提供了两台计算机之间可靠无差错的数据传输（三次握手）</p><p>1、TCP是可靠传输、UDP是不可靠传输</p><p>2、TCP面向连接、UDDP无连接</p><p>3、TCP传输数据有序，UDP不保证数据的有序性</p><p>4、TCP不保存数据边界，UDP保留数据边界不超过64kb，</p><p>5、TCp传输速度相对于UDP较慢</p><p>6、TCP有流量控制和拥塞控制，UDP没有</p><p>7、TCP是重量级协议，UDP是轻量级协议</p><h4 id="5、left-join、right-join、inner-join的区别"><a href="#5、left-join、right-join、inner-join的区别" class="headerlink" title="5、left join、right join、inner join的区别"></a>5、left join、right join、inner join的区别</h4><p>​     LEFT JOIN 关键字从左表（table1）返回所有的行，即使右表（table2）中没有匹配。如果右表中没有匹配，则结果为 NULL。</p><p>​      RIGHT JOIN 关键字从右表（table2）返回所有的行，即使左表（table1）中没有匹配。如果左表中没有匹配，则结果为 NULL。</p><p>INNER JOIN（内连接） 关键字在表中存在至少一个匹配时返回行。</p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211229102819631.png" alt="image-20211229102819631"></p><p><img src="C:\Users\86130\AppData\Roaming\Typora\typora-user-images\image-20211229102844413.png" alt="image-20211229102844413"></p><p>ps：full join（mysql没有此方法）表示A表和B表的并集，对于没有匹配的记录，则会以null做为值</p><h4 id="6、HashMap的底层架构"><a href="#6、HashMap的底层架构" class="headerlink" title="6、HashMap的底层架构"></a>6、HashMap的底层架构</h4><p>HashMap实际上是一个“链表的数组”的数据结构，每个元素存放链表头结点的数组，即数组和链表的结合体。1.8前是数组加链表，1.8后是数组+链表+红黑树</p><h4 id="7、数据库索引"><a href="#7、数据库索引" class="headerlink" title="7、数据库索引"></a>7、数据库索引</h4><p>第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>第二，可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。<br>第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>第四，在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、Mybatis中-和-的区别&quot;&gt;&lt;a href=&quot;#1、Mybatis中-和-的区别&quot; class=&quot;headerlink&quot; title=&quot;1、Mybatis中#和$的区别&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、Mybatis中#和$的区别&lt;/strong&gt;&lt;/h4&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
